var prompt = require('prompt');
var fs = require("fs");
const package = require('../../package.json');
const simpleGit = require('simple-git');
const git = simpleGit();
const colors = require("colors/safe");
const replace = require('replace-in-file');
const updateJsonFile = require('update-json-file')
var pipeline = require("./pipeline.js");
var deployment_group = require('./deployment_group.js');
const {createFile, createFolder, removeFile, removefolder } = require('./utils');

prompt.message = colors.green(">");
prompt.delimiter = " ";
prompt.start();

var verifySchema = {
    properties: {
        wordpressProject: {
            description: colors.brightBlue.bold("Welcome to the setup wizard for a project on the design server. This wizard will assist in setting up the required infrastructure to deploy your project to the design server or s3 hosted assets bucket. All sites will be secure and be accessable via a subdomain dynamically generated by combining the client name and project name with an underscore (_)."+colors.yellow.underline(" https://clientName_clientProject.designs.brafton.com ")+colors.brightBlue("If you wish to proceed hit Enter, if not please hit Ctrl + C \n"))
        },
        bit: {
            description: colors.cyan("Have you setup a new empty repo on github? [(yes|y)|(no|n)]"),
            type: 'string',
            pattern: /y[es]*|n[o]?/,
            message: 'Must respond yes or no',
        },
        org: {
            description: colors.cyan("Have you received the org and project ids for this project?"),
            type: 'string',
            pattern: /y[es]*|n[o]?/,
            message: 'Must respond yes or no',
        }
    }
}


prompt.get(verifySchema, function (err, VerifyicationOfGitCreatedQuestions) {

    if(err || (VerifyicationOfGitCreatedQuestions.bit == 'no' || VerifyicationOfGitCreatedQuestions.bit == 'n')){
        if(err){
            console.log(colors.magenta("\n Bye Bye"));
            return;
        }
        console.log(colors.magenta(" Please go setup a repo first as this setup wizard will automatically push to that repo and trigger the first build and deployment"));
        return;
    }
    if(err || (VerifyicationOfGitCreatedQuestions.org == 'no' || VerifyicationOfGitCreatedQuestions.org == 'n')){
        if(err){
            console.log(colors.magenta("\n Bye Bye"));
            return;
        }
        console.log(colors.magenta(" Please request orgId and projectId from your maanger before proceeding"));
        return;
    }
      
        var AWS_Repo_Schema = {
            properties: {
                warning: {
                    description: colors.magenta("Before proceeding with your project you will need to ensure you modify your main.yml file in your .github./workflows folder to zip, deploy, and/or build your project correct as what is included is only a shell. In addition you will need to update the appspec file in the root to deploy your folders and files to the correct place. Press ENTER to continue. Ctrl + C to cancel.")
                },
                name: {
                    description: colors.cyan("Enter the Client Name: "),
                    pattern: /^[a-zA-Z\d_]*$/,
                    message: "Can not contain spaces or dashes. use underscores(_) for word seperation",
                    require: true
                },
                project: {
                    description: colors.cyan("Enter the Project Name. (IE. sitebuild, pagebuild, quiz, ect): "),
                    pattern: /^[a-zA-Z\d_]*$/,
                    message: "Can not contain spaces or dashes. use underscores(_) for word seperation",
                    required: true
                },
                repo: {
                    description: colors.cyan("Enter the repo name: "),
                    required: true
                },
                location: {
                    description: colors.cyan("Does this project consist of only static resources? [(yes|y)|(no|n)]"),
                    required: true
                },
                orgId: {
                    description: colors.cyan("Provide the OrgId"),
                    when(answers){
                        return answers.location == yes || answers.location == y
                    }
                },
                projectId: {
                    description: colors.cyan("Provide the projectId"),
                    when(answers){
                        return answers.location == yes || answers.location == y
                    }
                },
                projectguid: {
                    description: colors.cyan("Provide the projectGUID"),
                    when(answers){
                        return answers.location == yes || answers.location == y
                    }
                }
            }
        }

        console.log(colors.white('*************************************************'));
        console.log("\n");
        prompt.get(AWS_Repo_Schema, (err, BasicAWSRepoQuestions)=>{
            if(err){
                return;
            }
            var application = {
                applicationName: ""
            };
            var env = `export NAME="${BasicAWSRepoQuestions.name}_${BasicAWSRepoQuestions.project}"
export TITLE="${BasicAWSRepoQuestions.title}"
export GLOBAL_OWNER="ec2-user"
export GLOBAL_GROUP="apache"`;
            var appspec = `version: 0.0
os: linux
files:
    - source: /
      destination: /var/www/html/${BasicAWSRepoQuestions.name}_${BasicAWSRepoQuestions.project}
hooks:
    BeforeInstall:
    - location: scripts/before.sh`;

            
            application.applicationName = `${BasicAWSRepoQuestions.name}_${BasicAWSRepoQuestions.project}-designs-dev-site`;

            deployment_group.deploymentGroupName = "designs-dev-site";
            deployment_group.applicationName = application.applicationName;

            pipeline.pipeline.name = `${BasicAWSRepoQuestions.name}_${BasicAWSRepoQuestions.project}-designs-dev-pipeline`;
            pipeline.pipeline.stages[0].actions[0].configuration.S3ObjectKey = `sites/Brafton-Client/${BasicAWSRepoQuestions.repo}/site.zip`;
            pipeline.pipeline.stages[1].actions[0].configuration.ApplicationName = application.applicationName;
            
            var gitUrl = `https://github.com/brafton-client/${BasicAWSRepoQuestions.repo}`;
            var siteUrl = `https://${BasicAWSRepoQuestions.name}_${BasicAWSRepoQuestions.project}.designs.brafton.com`;
            var fileManipulations = async ()=>{
                try{
                    if(BasicAWSRepoQuestions.location == 'yes' || BasicAWSRepoQuestions.location == 'y'){
                        var pre = await removeFile('./.github/workflows/deploy-to-ec2.yml');
                        var pre1 = await removeFile('./.github/workflows/create-aws-resources.yml');
                    }else{
                        var pre = await removeFile('./.github/workflows/deploy-to-s3.yml');
                    }
                    // var packageReplaceOptions = {
                    //     files: './package.json',
                    //     from: [/basebuild/g, /clientName/g, /projectName/g],
                    //     to: [`${BasicAWSRepoQuestions.name}_${BasicAWSRepoQuestions.project}`, `${BasicAWSRepoQuestions.name}`, `${BasicAWSRepoQuestions.project}`]
                    // }
                    // var re = await replace(packageReplaceOptions);
                    var packageUpdate = await updateJsonFile('./package.json', (data)=>{
                        data.name = `${BasicAWSRepoQuestions.name}_${BasicAWSRepoQuestions.project}`;
                        data.client = BasicAWSRepoQuestions.name;
                        data.project = BasicAWSRepoQuestions.project;
                        if(BasicAWSRepoQuestions.orgId){
                            data.orgId = BasicAWSRepoQuestions.orgId;
                            data.projectId = BasicAWSRepoQuestions.projectId;
                            data.projectGUID = BasicAWSRepoQuestions.projectguid;
                        }
                        return data;
                    })
                    var a = await createFile("pipeline.json", JSON.stringify(pipeline, null, 4));
                    var b = await createFile("application.json", JSON.stringify(application, null, 4));
                    var c = await createFile("deployment-group.json", JSON.stringify(deployment_group, null, 4));
                    var e = await createFile("project/appspec.yml", appspec);
                    var d = await createFile("project/scripts/env.conf",env);
                    return e;
                }catch(e){
                    console.log("There was an error performing one of your file manipulations");
                    console.log(e);
                }
            }
            var gitManipulations = async ()=>{

               
                await git.remote(["set-url","origin", gitUrl]);
                await git.add(['*']).commit("Initial Setup").checkout(["--orphan", "develop"]).add(['-A']).commit("New Project Initial Setup").push("origin", "develop");
                console.log("Successfully seperated from projectbasebuild and connected to your new repo");
                var lastGitOperation = await git.checkout(["-b","beta-build"]).push("origin", "beta-build");
               return lastGitOperation;
            };
            fileManipulations().then((last)=>{
                gitManipulations().then(res=>{
        
                    console.log(colors.cyan(`Once you setup the scaffolding of your project you can see your project at ${siteUrl} once the Build and Deploy git action has finished. You can view your gitactions here ${gitUrl}/actions to monitor them to completion. Once your action indicates it has finsihed it takes apx 2 more minutes for AWS Codepipeline to trigger and deploy.\n`))
                })
            })
            
        })
});